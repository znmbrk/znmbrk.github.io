---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Cow Language - Projects - Zain Mobarik">
  <h1>Cow Language</h1>
  <p class="author">Working with esoteric programming languages</p>

  <h2>Project Explanation</h2>

  <p>The COW programming language was designed with the bovine in mind. Given that cows have somewhat limited vocabulary skills, it seemed natural to incorporate only the words they know into the language. As a result, all instructions are some variation on "moo" which just so happens to be the only word they really understand.</p>

  <p>Any other word or symbol that isn't an instruction is ignored entirely. So, spaces can be used or not. Newlines can be used or not. You get the idea. It makes commenting COW programs rather easy as long as you don't use any words that have an instruction embedded in it. All instructions are case-sensitive.</p>

  <h2>MOOOOO!</h2>

  <p><strong>0. moo</strong> <br>This command is connected to the MOO command. When encountered during normal execution, it searches the program code in reverse looking for a matching MOO command and begins executing again starting from the found MOO command. When searching, it skips the instruction that is immediately before it (see MOO).</p>

  <p><strong>1. mOo</strong><br>Moves current memory position back one block.</p>

  <p><strong>2. moO</strong><br>Moves current memory position forward one block.</p>

  <p><strong>3. mOO</strong><br>Execute value in current memory block as if it were an instruction. The command executed is based on the instruction code value (for example, if the current memory block contains a 2, then the moO command is executed). An invalid command exits the running program. Value 3 is invalid as it would cause an infinite loop.</p>

  <p><strong>4. Moo</strong><br>If current memory block has a 0 in it, read a single ASCII character from STDIN and store it in the current memory block. If the current memory block is not 0, then print the ASCII character that corresponds to the value in the current memory block to STDOUT.</p>

  <p><strong>5. MOo</strong><br>Decrement current memory block value by 1.</p>

  <p><strong>6. MoO</strong><br>Increment current memory block value by 1.</p>

  <p><strong>7. MOO</strong><br>If current memory block value is 0, skip next command and resume execution after the next matching moo command. If current memory block value is not 0, then continue with next command.</p>

  <p><strong>8. OOO</strong><br>Set current memory block value to 0.</p>

  <p><strong>9. MMM</strong><br>If no current value in register, copy current memory block value. If there is a value in the register, then paste that value into the current memory block and clear the register.</p>

  <p><strong>10. OOM</strong><br>Print value of current memory block to STDOUT as an integer.</p>

  <p><strong>11. oom</strong><br>Read an integer from STDIN and put it into the current memory block.</p>

  <p>With these commands, I built a program to output the word "CHICKEN" to the terminal - this took me over 500 variations of "MOO" to output!</p>

  <h2>Project Demo</h2>
  <p><a href="https://www.youtube.com/embed/jyffWe99L7Y">Watch the demo video</a></p>

  <hr>

  <p><a href="/projects">‚Üê Back to projects</a></p>
</Layout>